<?php
// Set error reporting for debugging (remove in production)
ini_set('display_errors', 1);
error_reporting(E_ALL);

// Path to digit images (update if needed)
$digitsPath = __DIR__ . '/nixie numbers/';

// Counter logic (simple file-based)
$username = isset($_GET['username']) ? preg_replace('/\W/', '', $_GET['username']) : 'default';
$storageDir = __DIR__ . '/../storage/';
$storageFile = $storageDir . $username . '.txt';

// Ensure storage directory exists
if (!is_dir($storageDir)) {
    mkdir($storageDir, 0755, true);
}

// Read and increment count
$count = 1;
if (file_exists($storageFile)) {
    $count = (int)file_get_contents($storageFile) + 1;
}
file_put_contents($storageFile, $count);

// Format count (e.g., 6 digits)
$countStr = str_pad($count, 6, '0', STR_PAD_LEFT);

// Load digit images and get dimensions
$digitImages = [];
$digitWidth = 0;
$digitHeight = 0;
foreach (str_split($countStr) as $digit) {
    $img = imagecreatefrompng($digitsPath . $digit . '.png');
    if (!$img) {
        // fallback: create a blank image if digit image is missing
        $img = imagecreatetruecolor(40, 80);
        $bg = imagecolorallocate($img, 0, 0, 0);
        imagefill($img, 0, 0, $bg);
    }
    $digitImages[] = $img;
    $digitWidth = imagesx($img);
    $digitHeight = imagesy($img);
}

// Create final image
$totalWidth = $digitWidth * count($digitImages);
$finalImage = imagecreatetruecolor($totalWidth, $digitHeight);

// Merge digits
foreach ($digitImages as $i => $img) {
    imagecopy($finalImage, $img, $i * $digitWidth, 0, 0, 0, $digitWidth, $digitHeight);
    imagedestroy($img);
}

// Output as PNG
header('Content-Type: image/png');
imagepng($finalImage);
imagedestroy($finalImage);
?>